@page "/form/{**Url}"

@using BlazorApp4.Components.Common
@inject BlazorApp4.Services.FormService FormService
@rendermode InteractiveServer




@if (Url == "create")
{
    <h2>Form Builder Page</h2>

    <!-- Render the QuestionEditor component -->
    <QuestionEditor @ref="questionEditor" />

    <hr />

@*     <!-- Show all saved questions from QuestionEditor -->
    <h3>Saved Questions</h3>
        @if (questionEditor == null)
    {
        <p>No questions added yet.</p>
    }
    else
    {
        <ul>
                @foreach (var q in questionEditor.SavedQuestions)
            {
                <li>
                    <strong>@q.Question</strong> 
                    (@q.Type, Required: @q.Required)
                    @if (q.Type == "radiobox" || q.Type == "checkbox")
                    {
                        <ul>
                            @for (int i = 0; i < q.Options.Count; i++)
                            {
                                <li>
                                    @q.Options[i] 
                                    @if (q.Type == "radiobox" && q.SelectedRadio == i)
                                    {
                                        <span> (Selected) </span>
                                    }
                                    @if (q.Type == "checkbox" && q.SelectedCheckboxes[i])
                                    {
                                        <span> (Checked) </span>
                                    }
                                </li>
                            }
                        </ul>
                    }
                </li>
            }
        </ul>
    }

    <!-- Save all questions button (no API yet) -->
    <button class="btn btn-primary" @onclick="SaveForm">Save Form (API not implemented yet)</button> *@

}
else if (IsUnderCreateOrEdit)
{
    <h1>editing...</h1>
}
else if (form != null)
{
     <div class="form-container">
        <div class=form-head>
            <div class="form-title">@form.Title</div>
            <div class="form-description">@form.Description</div>
        </div>


        <EditForm Model="form" OnValidSubmit="HandleSubmit" FormName="@form.Url">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @foreach (var field in form.FormFields.OrderBy(f => f.Order))
            {
                <FormFieldComponent Field="field"
                                    HasResponse="@HasResponse(field)"
                                    IsUnderCreateOrEdit=@IsUnderCreateOrEdit
                                    CheckboxChanged="OnCheckboxChanged" />
            }


            <div class="button-container">
                <button class="btn" disabled="@IsFormAnswered">Submit</button>
            </div>
        </EditForm>

    </div>

}


@code {
    [Parameter]
    public string Url { get; set; }

    private BlazorApp4.Models.FormModel form;

    private bool IsFormAnswered = false;

    private bool IsUnderCreateOrEdit = false;

    public string message { get; set; } = "";

    private QuestionEditor questionEditor;



    protected override async Task OnInitializedAsync()
    {
        // Check if URL contains /form/edit/
        IsUnderCreateOrEdit = Url.StartsWith("edit/");

        if (IsUnderCreateOrEdit)
        {
            // Remove "edit/" from the start of Url
            Url = Url.Substring("edit/".Length);
        }

        if(Url != "create")
        {
            // Load the form by URL
            form = await FormService.GetFormByUrlAsync(Url);
        }

        try
        {
            if (form == null)
            {
                message = "Form not found.";
                return;
            }

            // Optional: load existing response if user has one
            var existingResponse = await FormService.GetUserFormResponseAsync(form.Id);

            IsFormAnswered = (existingResponse != null);

            if (existingResponse != null && existingResponse.FieldResponses != null)
            {
                foreach (var field in form.FormFields)
                {
                    var responses = existingResponse.FieldResponses
                        .Where(r => r.FieldId == field.Id)
                        .Select(r => r.Value)
                        .ToList();

                    switch (field.FieldType.ToLower())
                    {
                        case "radiobox":
                            field.RadioResponse = responses.FirstOrDefault();
                            break;

                        case "checkbox":
                            field.CheckboxResponse = responses;
                            break;

                        case "textbox":
                            field.TextResponse = responses.FirstOrDefault();
                            break;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            IsFormAnswered = false;
        }
    }

    private void SaveForm()
    {
        // // Currently just prints questions to console
        // foreach (var q in questionEditor.SavedQuestions)
        // {
        //     Console.WriteLine($"Question: {q.Question}, Type: {q.Type}");
        // }

        // // TODO: Add your API call here to save all questions
        // Console.WriteLine("Save form API not implemented yet.");
    }



    private void OnCheckboxChanged((BlazorApp4.Models.QuestionModel Field, string Option, bool IsChecked) data)
    {
        var field = data.Field;
        if (data.IsChecked && !field.CheckboxResponse.Contains(data.Option))
            field.CheckboxResponse.Add(data.Option);
        else if (!data.IsChecked && field.CheckboxResponse.Contains(data.Option))
            field.CheckboxResponse.Remove(data.Option);
    }



    private async Task HandleSubmit()
    {


        // Step 1: Create a response session
        var responseId = await FormService.CreateFormResponseAsync(form.Id);
        if (responseId == null)
        {
            message = "Failed to start response.";
            return;
        }

        // Step 2: Loop through fields and save answers
        foreach (var field in form.FormFields)
        {
            switch (field.FieldType.ToLower())
            {
                case "radiobox":
                    if (!string.IsNullOrEmpty(field.RadioResponse))
                    {
                        await FormService.CreateFormUserAnswerAsync(responseId.Value, field.Id, field.RadioResponse);
                    }
                    break;

                case "checkbox":
                    foreach (var val in field.CheckboxResponse)
                    {
                        await FormService.CreateFormUserAnswerAsync(responseId.Value, field.Id, val);
                    }
                    break;

                case "textbox":
                    if (!string.IsNullOrEmpty(field.TextResponse))
                    {
                        await FormService.CreateFormUserAnswerAsync(responseId.Value, field.Id, field.TextResponse);
                    }
                    break;
            }
        }
    }
    private bool HasResponse(BlazorApp4.Models.QuestionModel field)
    {
        switch (field.FieldType.ToLower())
        {
            case "radiobox":
                return !string.IsNullOrEmpty(field.RadioResponse) && IsFormAnswered;

            case "checkbox":
                return field.CheckboxResponse != null && field.CheckboxResponse.Any() && IsFormAnswered;

            case "textbox":
                return !string.IsNullOrEmpty(field.TextResponse) && IsFormAnswered;

            default:
                return false;
        }
    }

}
